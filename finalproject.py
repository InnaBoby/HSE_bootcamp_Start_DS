# -*- coding: utf-8 -*-
"""FinalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_6dexnJaELk63xzIbhUh4b2mfNZzVwVT
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import requests

#отображение всех столбцов таблицы - для Colab
#pd.set_option('display.max_columns', None)




def get_table(url):

  ''' Функция для загрузки данных по инфляции с сайта и сохранении в файл data.csv'''

  r=requests.get(url)
  df=pd.read_html(r.content)[0]
  print(df)
  df.to_csv('data.csv', index=True)
  return df





#load salary data
#salary_1 = pd.read_excel('/content/drive/MyDrive/HSE_FinalProject/tab3-zpl_2023.xlsx')
#salary_2 = pd.read_excel('/content/drive/MyDrive/HSE_FinalProject/tab3-zpl_2000-2016.xlsx')

def prepare_salary_data (df_1, df_2):

  ''' Функция для конкатенации данных по зарплате из двух таблиц за разные годы'''

  df_1['Unnamed: 0'] = df_1['Unnamed: 0'].apply(lambda x: x.lower().replace('  ', '').replace('  ', ''))
  df_2['Unnamed: 0'] = df_2['Unnamed: 0'].apply(lambda x: x.lower().replace('  ', '').replace('  ', ''))
  salary = df_1.merge(df_2, on ='Unnamed: 0')
  # переводим названия столбцов из int в str
  str_cols = list(map(str, salary.columns.to_list()))
  salary.columns = str_cols
  salary.rename(columns={'Unnamed: 0': 'Sphere'}, inplace=True)
  return salary





def salary_dinamic_graph (df):

  ''' Функция для отрисовки графиков динамики средних зарплат по отраслям по годам'''

  avarage_salary = df.describe().iloc[1]
  years = df.columns.to_list()[1:]
  fig, ax = plt.subplots(figsize=(10, 5), layout='constrained')
  for indx in range(len(df)):
    x_data = df.iloc[indx].to_list()[1:]
    legend_data = df.iloc[indx].to_list()[0]
    ax.plot(years, x_data, label=legend_data)
    #добавим график среднего уровня зарплат по 4-ем отраслям
    ax.plot(years, avarage_salary, label='avarage_salary', linestyle='--')

  ax.set_xlabel('years')
  ax.set_ylabel('salary')
  ax.set_title("Изменение зарплаты по годам")
  ax.legend()
  return fig





def real_salary_graph(year, inflation, salary):
  year = int(year)
  infl = inflation['Всего'] [inflation['Год'] == year].item()
  correct_on_infl = salary[str(year)] * ((100 - infl) / 100)
  data = salary[['Sphere', str(year-1), str(year)]]
  data['correct_on_inflation'] = correct_on_infl

  x = np.arange(len(data))

  fig, ax = plt.subplots(figsize=(10, 5))
  # столбец для предыдущего года
  v_1 = ax.bar(x - 0.3, data[str(year-1)], color='green', width=0.3, label=str(year-1))
  ax.bar_label(v_1, padding=3)
  # столбцы для выбранного года
  v_2 = ax.bar(x, data[str(year)], color='blue', width=0.3, label=str(year))
  ax.bar_label(v_2, padding=3)
  # столбцы для скорректированной на инфляцию зарплаты выбранного года
  v_3 = ax.bar(x + 0.3, data['correct_on_inflation'], color='red', width=0.3, label='corrected on inflation')
  ax.bar_label(v_3, padding=3)
  # подпись меток оси х
  ax.set_xticks(x, data['Sphere'].to_list())
  ax.set_xlabel('Отрасли')
  ax.set_ylabel('Средняя зарплата в отрасли, в рублях')
  ax.set_title("Динамика изменения реальных зарплат с учетом инфляции")
  ax.legend()

  return fig
